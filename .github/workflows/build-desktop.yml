name: Build Desktop App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: passman-linux.tar.gz
            platform: linux
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: passman-macos.dmg
            platform: macos
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: passman-macos-arm64.dmg
            platform: macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: passman-windows.exe
            platform: windows

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.1-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Installing macOS build dependencies..."
        # Install Xcode command line tools if not present
        xcode-select --install || true
        # Install additional tools that might be needed
        brew install --quiet pkg-config
        echo "macOS dependencies installed"

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows uses system WebView2, no additional dependencies needed
        echo "Windows uses system WebView2, no additional dependencies required"

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: desktop/package-lock.json
    
    - name: Install dependencies
      run: |
        cd desktop
        npm ci
    
    - name: Build frontend
      run: |
        cd desktop
        npm run build
    
    - name: Install Tauri CLI
      run: |
        cd desktop
        npm install -g @tauri-apps/cli@latest
    
    - name: Build Tauri app
      run: |
        cd desktop
        echo "Building for target: ${{ matrix.target }}"
        echo "Current directory: $(pwd)"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Rust version: $(rustc --version)"
        echo "Cargo version: $(cargo --version)"
        npm run tauri build -- --target ${{ matrix.target }}
        echo "Build completed, checking output directory..."
        find . -name "*.dmg" -o -name "*.app" -o -name "*.tar.gz" -o -name "*.msi" | head -10
        echo "Checking bundle directory structure..."
        find desktop/src-tauri/target/ -type d -name "bundle" | head -5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create archive (Linux)
      if: matrix.platform == 'linux'
      run: |
        cd desktop/src-tauri/target/${{ matrix.target }}/release/bundle/
        tar -czf ../../../../../../${{ matrix.artifact }} passman
        cd ../../../../../
        ls -la ${{ matrix.artifact }}
    
    - name: Create archive (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "Checking if Tauri build succeeded..."
        if [ ! -d "desktop/src-tauri/target/${{ matrix.target }}/release/" ]; then
          echo "ERROR: Tauri build failed - no release directory found"
          echo "Contents of desktop/src-tauri/target/:"
          ls -la desktop/src-tauri/target/ || echo "Target directory does not exist"
          exit 1
        fi
        
        echo "Looking for bundle directory..."
        if [ -d "desktop/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/" ]; then
          echo "Found DMG directory, copying files..."
          cd desktop/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/
          cp *.dmg ../../../../../../${{ matrix.artifact }}
          cd ../../../../../../
        else
          echo "DMG directory not found, checking for other bundle formats..."
          find desktop/src-tauri/target/${{ matrix.target }}/release/bundle/ -name "*.dmg" -exec cp {} ${{ matrix.artifact }} \;
          if [ ! -f "${{ matrix.artifact }}" ]; then
            echo "ERROR: No DMG file found after build"
            echo "Contents of bundle directory:"
            find desktop/src-tauri/target/${{ matrix.target }}/release/bundle/ -type f | head -10
            exit 1
          fi
        fi
        ls -la ${{ matrix.artifact }}
    
    - name: Create archive (macOS ARM64)
      if: matrix.platform == 'macos-arm64'
      run: |
        echo "Checking if Tauri build succeeded..."
        if [ ! -d "desktop/src-tauri/target/${{ matrix.target }}/release/" ]; then
          echo "ERROR: Tauri build failed - no release directory found"
          echo "Contents of desktop/src-tauri/target/:"
          ls -la desktop/src-tauri/target/ || echo "Target directory does not exist"
          exit 1
        fi
        
        echo "Looking for bundle directory..."
        if [ -d "desktop/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/" ]; then
          echo "Found DMG directory, copying files..."
          cd desktop/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/
          cp *.dmg ../../../../../../${{ matrix.artifact }}
          cd ../../../../../../
        else
          echo "DMG directory not found, checking for other bundle formats..."
          find desktop/src-tauri/target/${{ matrix.target }}/release/bundle/ -name "*.dmg" -exec cp {} ${{ matrix.artifact }} \;
          if [ ! -f "${{ matrix.artifact }}" ]; then
            echo "ERROR: No DMG file found after build"
            echo "Contents of bundle directory:"
            find desktop/src-tauri/target/${{ matrix.target }}/release/bundle/ -type f | head -10
            exit 1
          fi
        fi
        ls -la ${{ matrix.artifact }}
    
    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd desktop/src-tauri/target/${{ matrix.target }}/release/bundle/msi/
        copy *.msi ../../../../../../${{ matrix.artifact }}
        cd ../../../../../../
        dir ${{ matrix.artifact }}
    
    - name: Generate checksum (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        shasum -a 256 ${{ matrix.artifact }} > ${{ matrix.artifact }}.sha256
        cat ${{ matrix.artifact }}.sha256
    
    - name: Generate checksum (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        certutil -hashfile ${{ matrix.artifact }} SHA256 > ${{ matrix.artifact }}.sha256
        type ${{ matrix.artifact }}.sha256
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}
    
    - name: Upload checksum
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}.sha256
        path: ${{ matrix.artifact }}.sha256
