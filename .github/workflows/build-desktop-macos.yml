name: Build Desktop App - macOS

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-x86_64:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
    
    - name: Add Rust targets
      run: |
        rustup target add x86_64-apple-darwin
        rustup target add aarch64-apple-darwin
        echo "Rust targets installed:"
        rustup target list --installed
    
    - name: Install system dependencies
      run: |
        echo "Installing macOS build dependencies..."
        # Install Xcode command line tools if not present
        xcode-select --install || true
        # Install additional tools that might be needed
        brew install --quiet pkg-config
        echo "macOS dependencies installed"
    
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: desktop/package-lock.json
    
    - name: Install dependencies
      run: |
        cd desktop
        npm ci
    
    - name: Build frontend
      run: |
        cd desktop
        npm run build
    
    - name: Install Tauri CLI
      run: |
        cd desktop
        npm install -g @tauri-apps/cli@latest
        echo "Tauri CLI version:"
        tauri --version
        echo "Checking Tauri configuration..."
        cat src-tauri/tauri.conf.json
    
    - name: Build Tauri app (x86_64)
      run: |
        cd desktop
        echo "Building for macOS x86_64..."
        echo "Installing Tauri CLI locally..."
        npm install @tauri-apps/cli@latest
        echo "Running Tauri build..."
        npx tauri build --target x86_64-apple-darwin
        echo "Build completed, checking output directory..."
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "Checking for target directory..."
        if [ -d "src-tauri/target" ]; then
          echo "Target directory found, contents:"
          ls -la src-tauri/target/
          echo "Looking for release directory..."
          if [ -d "src-tauri/target/x86_64-apple-darwin/release" ]; then
            echo "Release directory found, contents:"
            ls -la src-tauri/target/x86_64-apple-darwin/release/
            echo "Looking for bundle directory..."
            if [ -d "src-tauri/target/x86_64-apple-darwin/release/bundle" ]; then
              echo "Bundle directory found, contents:"
              ls -la src-tauri/target/x86_64-apple-darwin/release/bundle/
            fi
          fi
        else
          echo "ERROR: Target directory not found"
          echo "Contents of src-tauri:"
          ls -la src-tauri/
        fi
        find . -name "*.dmg" -o -name "*.app" | head -10
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create archive (x86_64)
      run: |
        cd desktop
        echo "Checking if Tauri build succeeded..."
        if [ ! -d "src-tauri/target/x86_64-apple-darwin/release/" ]; then
          echo "ERROR: Tauri build failed - no release directory found"
          echo "Contents of src-tauri/target/:"
          ls -la src-tauri/target/ || echo "Target directory does not exist"
          exit 1
        fi
        
        echo "Looking for bundle directory..."
        if [ -d "src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/" ]; then
          echo "Found DMG directory, copying files..."
          cd src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/
          cp *.dmg ../../../../../../passman-macos.tar.gz
          cd ../../../../../../
        else
          echo "DMG directory not found, checking for other bundle formats..."
          find src-tauri/target/x86_64-apple-darwin/release/bundle/ -name "*.dmg" -exec cp {} passman-macos.tar.gz \;
          if [ ! -f "passman-macos.tar.gz" ]; then
            echo "ERROR: No DMG file found after build"
            echo "Contents of bundle directory:"
            find src-tauri/target/x86_64-apple-darwin/release/bundle/ -type f | head -10
            exit 1
          fi
        fi
        ls -la passman-macos.tar.gz
    
    - name: Generate checksum (x86_64)
      run: |
        shasum -a 256 passman-macos.tar.gz > passman-macos.tar.gz.sha256
        cat passman-macos.tar.gz.sha256
    
    - name: Upload artifacts (x86_64)
      uses: actions/upload-artifact@v4
      with:
        name: passman-macos.tar.gz
        path: passman-macos.tar.gz
    
    - name: Upload checksum (x86_64)
      uses: actions/upload-artifact@v4
      with:
        name: passman-macos.tar.gz.sha256
        path: passman-macos.tar.gz.sha256

  build-arm64:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
    
    - name: Add Rust targets
      run: |
        rustup target add x86_64-apple-darwin
        rustup target add aarch64-apple-darwin
        echo "Rust targets installed:"
        rustup target list --installed
    
    - name: Install system dependencies
      run: |
        echo "Installing macOS build dependencies..."
        # Install Xcode command line tools if not present
        xcode-select --install || true
        # Install additional tools that might be needed
        brew install --quiet pkg-config
        echo "macOS dependencies installed"
    
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: desktop/package-lock.json
    
    - name: Install dependencies
      run: |
        cd desktop
        npm ci
    
    - name: Build frontend
      run: |
        cd desktop
        npm run build
    
    - name: Install Tauri CLI
      run: |
        cd desktop
        npm install -g @tauri-apps/cli@latest
        echo "Tauri CLI version:"
        tauri --version
        echo "Checking Tauri configuration..."
        cat src-tauri/tauri.conf.json
    
    - name: Build Tauri app (ARM64)
      run: |
        cd desktop
        echo "Building for macOS ARM64..."
        echo "Installing Tauri CLI locally..."
        npm install @tauri-apps/cli@latest
        echo "Running Tauri build..."
        npx tauri build --target aarch64-apple-darwin
        echo "Build completed, checking output directory..."
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        echo "Checking for target directory..."
        if [ -d "src-tauri/target" ]; then
          echo "Target directory found, contents:"
          ls -la src-tauri/target/
          echo "Looking for release directory..."
          if [ -d "src-tauri/target/aarch64-apple-darwin/release" ]; then
            echo "Release directory found, contents:"
            ls -la src-tauri/target/aarch64-apple-darwin/release/
            echo "Looking for bundle directory..."
            if [ -d "src-tauri/target/aarch64-apple-darwin/release/bundle" ]; then
              echo "Bundle directory found, contents:"
              ls -la src-tauri/target/aarch64-apple-darwin/release/bundle/
            fi
          fi
        else
          echo "ERROR: Target directory not found"
          echo "Contents of src-tauri:"
          ls -la src-tauri/
        fi
        find . -name "*.dmg" -o -name "*.app" | head -10
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create archive (ARM64)
      run: |
        cd desktop
        echo "Checking if Tauri build succeeded..."
        if [ ! -d "src-tauri/target/aarch64-apple-darwin/release/" ]; then
          echo "ERROR: Tauri build failed - no release directory found"
          echo "Contents of src-tauri/target/:"
          ls -la src-tauri/target/ || echo "Target directory does not exist"
          exit 1
        fi
        
        echo "Looking for bundle directory..."
        if [ -d "src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/" ]; then
          echo "Found DMG directory, copying files..."
          cd src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/
          cp *.dmg ../../../../../../passman-macos-arm64.tar.gz
          cd ../../../../../../
        else
          echo "DMG directory not found, checking for other bundle formats..."
          find src-tauri/target/aarch64-apple-darwin/release/bundle/ -name "*.dmg" -exec cp {} passman-macos-arm64.tar.gz \;
          if [ ! -f "passman-macos-arm64.tar.gz" ]; then
            echo "ERROR: No DMG file found after build"
            echo "Contents of bundle directory:"
            find src-tauri/target/aarch64-apple-darwin/release/bundle/ -type f | head -10
            exit 1
          fi
        fi
        ls -la passman-macos-arm64.tar.gz
    
    - name: Generate checksum (ARM64)
      run: |
        shasum -a 256 passman-macos-arm64.tar.gz > passman-macos-arm64.tar.gz.sha256
        cat passman-macos-arm64.tar.gz.sha256
    
    - name: Upload artifacts (ARM64)
      uses: actions/upload-artifact@v4
      with:
        name: passman-macos-arm64.tar.gz
        path: passman-macos-arm64.tar.gz
    
    - name: Upload checksum (ARM64)
      uses: actions/upload-artifact@v4
      with:
        name: passman-macos-arm64.tar.gz.sha256
        path: passman-macos-arm64.tar.gz.sha256
